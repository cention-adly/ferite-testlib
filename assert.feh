uses 'regexp';

function assert (void subject) {
	return new Assert(subject);
}

function assert_error (string err_match) {
	object t = recipient();
	
	monitor {
		t.invoke();
	}
	handle {
		if (Regexp.match(err_match,err.str)) return;
		else raise new Error('Assertion Error: Error message "' + err.str + '" should match "' + err_match + '"');
	}
	raise new Error('Assertion Error: Expected error "' + err_match + '" not raised');
}

class Assert {
	void SUBJECT;
	object doesNot;
	object does_not;

	function constructor (void subject) {
		.SUBJECT = subject;
		.doesNot = new NotAssert(.SUBJECT);
		.does_not = .doesNot;
	}
	
	static function parray (array a) {
		if (a.size() > 3) {
			return ' [' + a[0..2].join(',') + '...] ';
		}
		return ' [' + a.join(',') + '] ';
	}
	
	function equals (string t) {
		if (.SUBJECT == t) return;
		raise new Error("Assertion Error: '${.SUBJECT}' should equal '${t}'");
	}
	
	function equals (array t) {
		if (.SUBJECT.size() == t.size()) {
			for (number i=0;i<t.size();i++) {
				assert(.SUBJECT[i]).equals(t[i]);
			}
			return;
		}
		raise new Error(
			'Assertion Error: ' + Assert.parray(.SUBJECT) +
			' should equal ' + Assert.parray(t)
		);
	}
	
	function equals (number t) {
		if (.SUBJECT == t) return;
		raise new Error("Assertion Error: '${.SUBJECT}' should equal '${t}'");
	}
	
	function equals (object t) {
		if (t == null) {
			if (.SUBJECT == t) return;
			raise new Error("Assertion Error: '${.SUBJECT}' should equal '${t}'");
		}
	}
	
	function contains (void t) {
		for (number i=0;i<.SUBJECT.size();i++) {
			if (.SUBJECT[i] == t) {
				return;
			}
		}
		raise new Error(
			'Assertion Error:' + Assert.parray(.SUBJECT) +
			"should contain: '" + t + "'"
		);
	}
	
	function contains (string key,void t) {
		array err_map;
		number count = 0;
		number found = 0;
		.SUBJECT.map() using (k,v) {
			if (count++ < 4) {
				err_map.push("${k}=>${v}");
			}
			if (k == key && v == t) found = 1;
		};
		if (!found) {
			raise new Error(
				'Assertion Error:' + Assert.parray(err_map) +
				'should contain: [' + key + '=>' + t + ']'
			);
		}
	}
}

class NotAssert {
	void SUBJECT;

	function constructor (void subject) {
		.SUBJECT = subject;
	}
	
	function equal (void t) {
		.equals(t);
	}
	
	function contain (void t) {
		.contains(t);
	}
	
	function contain (string k, void t) {
		.contains(k,t);
	}
	
	function equals (string t) {
		if (.SUBJECT != t) return;
		raise new Error("Assertion Error: '${.SUBJECT}' should not equal '${t}'");
	}
	
	function equals (array t) {
		if (.SUBJECT.size() != t.size()) {
			for (number i=0;i<t.size();i++) {
				assert(.SUBJECT[i]).equals(t[i]);
			}
			return;
		}
		raise new Error(
			'Assertion Error:' + Assert.parray(.SUBJECT) +
			'should not equal' + Assert.parray(t)
		);
	}
	
	function equals (number t) {
		if (.SUBJECT != t) return;
		raise new Error("Assertion Error: '${.SUBJECT}' should not equal '${t}'");
	}
	
	function contains (void t) {
		for (number i=0;i<.SUBJECT.size();i++) {
			if (.SUBJECT[i] == t) {
				raise new Error(
					'Assertion Error:' + Assert.parray(.SUBJECT) +
					"should not contain: '" + t + "'"
				);
			}
		}
	}
	
	function contains (string key,void t) {
		array err_map;
		number count = 0;
		number found = 0;
		.SUBJECT.map() using (k,v) {
			if (count++ < 4) {
				err_map.push("${k}=>${v}");
			}
			if (k == key && v == t) found = 1;
		};
		if (found) {
			raise new Error(
				'Assertion:' + Assert.parray(err_map) +
				'should not contain: [' + key + '=>' + t + ']'
			);
		}
	}
}
