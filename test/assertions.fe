uses '../testlib', '../assert';

testsuite('Assertions') using {
	testcase('assert.equals') using {
		assert('string').equals('string');
		assert(100).equals(100);
		assert([1,2,3]).equals([1,2,3]);
	};
	
	testcase('assert.equals failure') using {
		assert_error('should equal') using {
			assert('hello').equals('bye');
		};
		assert_error('should equal') using {
			assert(1).equals(2);
		};
		assert_error('should equal') using {
			assert([1,2,3]).equals([1,2]);
		};
	};
	
	testcase('assert.equals(null)') using {
		void t = null;
		assert(t).equals(null);
	};
	
	testcase('must fail') using {
		assert('hello').equals(1);
	};
	
	testcase('array contains a value') using {
		assert([1,2,3]).contains(3);
		assert(['hello','world']).contains('world');
		
		assert_error('should contain') using {
			assert([1,2,3]).contains(4);
		};
		assert_error('should contain') using {
			assert([1,2,3]).contains('mango');
		};
		assert_error('should contain') using {
			assert(['hello','world']).contains('goodbye');
		};
		assert_error('should contain') using {
			assert(['hello','world']).contains(5);
		};
	};
	
	testcase('array contains key=>value pair') using {
		assert([
			'string' => 'hello',
			'number' => 1
		]).contains('number',1);
		assert_error('should contain') using {
			assert([
				'string' => 'hello',
				'number' => 1
			]).contains('ghost','shark');
		};
	};
	
	testcase('not assertions') using {
		assert('hello').doesNot.equals('bye');
		assert(1).doesNot.equals(2);
		assert([1,2,3]).doesNot.equals([1,2]);
		assert([1,2,3]).doesNot.contains(4);
		assert([
			'string' => 'hello',
			'number' => 1
		]).doesNot.contains('ghost','shark');
	};
	
	testcase('corner cases') using {
		assert_error('should equal') using {
			assert([1,2,3]).equals([1,2,5]);
		};
		assert([1,2,3]).doesNot.equal([1,2,5]);
	};
	
	testcase('alternate spelling of methods') using {
		assert(1).does_not.equal(2);
		assert([1,2,3]).does_not.contain(4);
		assert(['hello' => 'world']).does_not.contain(['ghost'=>'shark']);
	};
};
