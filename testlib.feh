uses 'console';
uses 'testlib_formatter';

function testcase (string description) {
	object t = recipient();
	TestSuite.tests.push([
		'description' => description,
		'test_closure' => t
	]);
}

function testsuite (string description) {
	object s = recipient();
	TestSuite.init(description);
	s.invoke();
	TestSuite.run();
}

namespace TestSuite {
	string description;
	array tests;
	array errors;
	array options;
	number count;
	
	function init (string d) {
		.tests = [];
		.errors = [];
		.count = 0;
		.description = d;
		.options = [
			'formatter' => 'default'
		];
		
		if (argv.size()) {
			.options.formatter = argv[0];
		}
	}
	
	function run () {
		object output = new TestlibFormatter(.options.formatter);
		
		output.printHeader(.description, .tests.size());
	
		.tests.each() using (t) {
			monitor {
				t.test_closure.invoke();
			}
			handle {
				void trace = err.backtrace[1];
				.errors.push([
					'testsuite' => .description,
					'testcase' => t.description,
					'error' => err.str,
					'source' => "${trace['file']}:${trace['line']}",
					'trace' => err.backtrace[2..].process() using (t) {
						return "\tcalled from ${t.file}:${t.line} ${t.function}()";
					}.join("\n")
				]);
				output.printFAIL(
					.count,
					t.description,
					err.str,
					"${trace['file']}:${trace['line']}"
				);
				.count++;
				return;
			}
			output.printOK(.count, t.description);
			.count++;
		};
	
		output.printSummary(.tests.size(),.count,.errors);
	}
	
	function print (string status, number count, string txt, string error) {
		if (argv.valueExists('tap')) {
			Console.println([status,count+1,'-',txt, (error == ''?'':', '+error)].join(' '));
		}
		else if (argv.valueExists('verbose')) {
			if (status == 'ok') {
				Console.println('OK: ' + txt);
			}
			else {
				Console.println('FAIL: ' + txt + "\n\t" + error);
			}
		}
	}
}
