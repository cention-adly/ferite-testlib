
class TestlibFormatter {
	static array formats;
	array selected_formatter;
	
	static function RED (string txt) {
		return "\033[0;31m${txt}\033[0;m";
	}
	
	static function GREEN (string txt) {
		return "\033[0;32m${txt}\033[0;m";
	}
	
	function constructor (string formatter) {
		if (TestlibFormatter.formats[formatter]) {
			.selected_formatter = TestlibFormatter.formats[formatter];
		}
		else {
			.selected_formatter = TestlibFormatter.formats['default'];
		}
	}
	
	function constructor () {
		.selected_formatter = TestlibFormatter.formats['default'];	
	}

	function printHeader (string testsuite, number total_tests) {
		.selected_formatter.header.invoke(testsuite, total_tests);
	}

	function printOK (number id, string description) {
		.selected_formatter.ok.invoke(id,description);
	}
	
	function printFAIL (number id, string description, string error, string source) {
		.selected_formatter.fail.invoke(id,description,error,source);
	}
	
	function printSummary (number total_tests, number count, array errors) {
		.selected_formatter.summary.invoke(total_tests,count,errors);
	}
}

TestlibFormatter.formats['default'] = [
	'header' => closure (string testsuite, number total_tests) {
		Console.print('- ' + testsuite);
		Sys.stdout().flush();
	},
	'ok' => closure (number id, string description) {},
	'fail' => closure (number id, string description, string error, string source) {},
	'summary' => closure (number total_tests, number count, array errors) {
		Console.print(" .. ${count} tests complete. ");
	
		if (errors.size() == 0) {
			Console.println("All " + TestlibFormatter.GREEN('OK'));
		}
		else {
			Console.println("${errors.size()} tests " + TestlibFormatter.RED('FAILED'));
			Console.printlnErr('================================================');
			Console.printlnErr(
				errors.process() using (e) {
					return  "${e.testsuite} -> ${e.testcase}\n${e.error}" +
							"\n\t${e.source}";
				}.join(     "\n------------------------------------------------\n")
			);
			Console.printlnErr('================================================');
		}
	}
];

TestlibFormatter.formats['verbose'] = [
	'header' => closure (string testsuite, number total_tests) {
		Console.println("\nTest suite: ${testsuite}");
		Sys.stdout().flush();
	},
	'ok' => closure (number id, string description) {
		Console.println(TestlibFormatter.GREEN("  OK") + ': ' + description);
	},
	'fail' => closure (number id, string description, string error, string source) {
		Console.println(TestlibFormatter.RED("  FAIL") + ': ' + description);
		Console.println("    ${error}");
	},
	'summary' => closure (number total_tests, number count, array errors) {
		if (count == total_tests) {
			Console.println("  ${count} tests complete.");
		}
		else {
			Console.println(
				"  Tests failed to run to completion." +
				"  ${count} out of ${total_tests} tests completed."
			);
		}
	
		if (errors.size() == 0) {
			Console.println(TestlibFormatter.GREEN('All OK'));
		}
		else {
			Console.println(TestlibFormatter.RED("${errors.size()} tests FAILED"));
			Console.printlnErr('================================================');
			Console.printlnErr(
				errors.process() using (e) {
					return  "Test Suite: ${e.testsuite}\nTest Case: ${e.testcase}\n${e.error}" +
							"\n\t${e.source}\n${e.trace}";					
				}.join(     "\n------------------------------------------------\n")
			);
			Console.printlnErr('================================================');
		}
	}
];

TestlibFormatter.formats['tap'] = [
	'header' => closure (string testsuite, number total_tests) {
		Console.println('1..' + total_tests);
	},
	'ok' => closure (number id, string description) {
		Console.println('ok ' + (id+1) + ' - ' + description);
	},
	'fail' => closure (number id, string description, string error, string source) {
		Console.println('not ok ' + (id+1) + ' - ' + description + ', ' + error);
	},
	'summary' => closure (number total_tests, number count, array errors) {}
];
